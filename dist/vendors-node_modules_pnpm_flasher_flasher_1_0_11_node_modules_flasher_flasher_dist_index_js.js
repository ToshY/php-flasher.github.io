"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_pnpm_flasher_flasher_1_0_11_node_modules_flasher_flasher_dist_index_js"],{

/***/ "./node_modules/.pnpm/@flasher+flasher@1.0.11/node_modules/@flasher/flasher/dist/index.js":
/*!************************************************************************************************!*\
  !*** ./node_modules/.pnpm/@flasher+flasher@1.0.11/node_modules/@flasher/flasher/dist/index.js ***!
  \************************************************************************************************/
/***/ (function(module) {



var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}

var css = ".fl-main-container{\n  position:fixed;\n  width:24rem;\n  z-index:99999;\n  transition:all 1s ease-in-out; }\n  .fl-main-container[data-position^=\"top-\"]{\n    top:0.5rem; }\n  .fl-main-container[data-position^=\"bottom-\"]{\n    bottom:0.5rem; }\n  .fl-main-container[data-position$=\"-right\"]{\n    right:0.5rem; }\n    .fl-main-container[data-position$=\"-right\"] .fl-container{\n      transform:translateX(110%); }\n  .fl-main-container[data-position$=\"-left\"]{\n    left:0.5rem; }\n    .fl-main-container[data-position$=\"-left\"] .fl-container{\n      transform:translateX(-110%); }\n  .fl-main-container[data-position$=\"-center\"]{\n    left:50%;\n    transform:translateX(-50%); }\n  .fl-main-container[data-position=\"top-center\"] .fl-container{\n    transform:translateY(-100vh); }\n  .fl-main-container[data-position=\"bottom-center\"] .fl-container{\n    transform:translateY(100vh); }\n\n.fl-main-container .fl-container{\n  transition:transform 0.3s ease-in-out; }\n  .fl-main-container .fl-container.fl-show{\n    transform:translate(0, 0); }\n\n.fl-main-container .fl-container.fl-success{\n  border-left:0.8rem solid #059669FF; }\n  .fl-main-container .fl-container.fl-success .fl-icon{\n    background-color:#059669FF; }\n  .fl-main-container .fl-container.fl-success .fl-title{\n    color:#059669FF; }\n  .fl-main-container .fl-container.fl-success .fl-progress-bar{\n    background-color:#6dface; }\n    .fl-main-container .fl-container.fl-success .fl-progress-bar .fl-progress{\n      background-color:#059669FF; }\n\n.fl-main-container .fl-container.fl-info{\n  border-left:0.8rem solid #2563EBFF; }\n  .fl-main-container .fl-container.fl-info .fl-icon{\n    background-color:#2563EBFF; }\n  .fl-main-container .fl-container.fl-info .fl-title{\n    color:#2563EBFF; }\n  .fl-main-container .fl-container.fl-info .fl-progress-bar{\n    background-color:#e0e9fc; }\n    .fl-main-container .fl-container.fl-info .fl-progress-bar .fl-progress{\n      background-color:#2563EBFF; }\n\n.fl-main-container .fl-container.fl-warning{\n  border-left:0.8rem solid #D97706FF; }\n  .fl-main-container .fl-container.fl-warning .fl-icon{\n    background-color:#D97706FF; }\n  .fl-main-container .fl-container.fl-warning .fl-title{\n    color:#D97706FF; }\n  .fl-main-container .fl-container.fl-warning .fl-progress-bar{\n    background-color:#fdd8ae; }\n    .fl-main-container .fl-container.fl-warning .fl-progress-bar .fl-progress{\n      background-color:#D97706FF; }\n\n.fl-main-container .fl-container.fl-error{\n  border-left:0.8rem solid #DC2626FF; }\n  .fl-main-container .fl-container.fl-error .fl-icon{\n    background-color:#DC2626FF; }\n  .fl-main-container .fl-container.fl-error .fl-title{\n    color:#DC2626FF; }\n  .fl-main-container .fl-container.fl-error .fl-progress-bar{\n    background-color:#f8d6d6; }\n    .fl-main-container .fl-container.fl-error .fl-progress-bar .fl-progress{\n      background-color:#DC2626FF; }\n\n.fl-main-container .fl-container .fl-icon{\n  position:relative;\n  width:1em;\n  height:1em;\n  margin:0;\n  border-radius:50%;\n  transition:all 1s;\n  box-sizing:border-box;\n  display:inline-block;\n  color:white; }\n  .fl-main-container .fl-container .fl-icon:before, .fl-main-container .fl-container .fl-icon:after{\n    content:\"\";\n    position:absolute;\n    transition:all 1s;\n    border-width:0;\n    box-sizing:border-box; }\n\n.fl-main-container .fl-container.fl-success .fl-icon:before, .fl-main-container .fl-container.fl-success .fl-icon:after{\n  width:0.16em;\n  height:0.6em;\n  background-color:currentColor;\n  border-radius:0.1em;\n  top:0.6em;\n  left:0.35em;\n  transform:rotate(-135deg);\n  transform-origin:0.08em 0.08em; }\n\n.fl-main-container .fl-container.fl-success .fl-icon:after{\n  width:0.4em;\n  height:0.16em; }\n\n.fl-main-container .fl-container.fl-info .fl-icon:before, .fl-main-container .fl-container.fl-info .fl-icon:after{\n  width:0.15em;\n  background-color:currentColor;\n  left:50%;\n  transform:translateX(-50%);\n  border-radius:0.03em; }\n\n.fl-main-container .fl-container.fl-info .fl-icon:before{\n  height:0.38em;\n  top:0.4em; }\n\n.fl-main-container .fl-container.fl-info .fl-icon:after{\n  height:0.13em;\n  box-shadow:-0.06em 0.19em, -0.06em 0.44em, 0.06em 0.44em;\n  top:0.21em; }\n\n.fl-main-container .fl-container.fl-warning .fl-icon:before, .fl-main-container .fl-container.fl-warning .fl-icon:after{\n  width:0.15em;\n  background-color:currentColor;\n  border-radius:0.03em;\n  left:50%;\n  transform:translateX(-50%); }\n\n.fl-main-container .fl-container.fl-warning .fl-icon:before{\n  height:0.38em;\n  top:0.21em; }\n\n.fl-main-container .fl-container.fl-warning .fl-icon:after{\n  height:0.13em;\n  top:0.65em; }\n\n.fl-main-container .fl-container.fl-error .fl-icon:before, .fl-main-container .fl-container.fl-error .fl-icon:after{\n  width:0.16em;\n  height:0.7em;\n  background-color:currentColor;\n  border-radius:0.1em;\n  transform:translate(-50%, -50%) rotate(-135deg);\n  top:50%;\n  left:50%; }\n\n.fl-main-container .fl-container.fl-error .fl-icon:after{\n  transform:translate(-50%, -50%) rotate(-45deg); }\n.fl-main-container .fl-container.fl-flasher{\n  font-family:-apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  line-height:1.5;\n  background-color:white;\n  color:#4b5563;\n  margin-top:0.5rem;\n  border-radius:0.375rem 0 0 0.375rem;\n  cursor:pointer;\n  box-shadow:0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  word-break:break-word; }\n  .fl-main-container .fl-container.fl-flasher .fl-content{\n    display:flex;\n    padding:0.75rem;\n    align-items:center; }\n  .fl-main-container .fl-container.fl-flasher .fl-icon{\n    font-size:2.5rem; }\n  .fl-main-container .fl-container.fl-flasher .fl-title, .fl-main-container .fl-container.fl-flasher .fl-message{\n    display:block;\n    margin-left:1rem;\n    line-height:1.25rem;\n    text-transform:capitalize; }\n  .fl-main-container .fl-container.fl-flasher .fl-title{\n    font-size:1rem;\n    font-weight:500; }\n  .fl-main-container .fl-container.fl-flasher .fl-message{\n    margin-top:0.25rem;\n    font-size:0.875rem; }\n  .fl-main-container .fl-container.fl-flasher .fl-progress-bar{\n    display:flex;\n    height:0.125rem;\n    margin-left:-1px; }\n\n.dark .fl-main-container .fl-flasher.fl-container{\n  background-color:#0f172a;\n  color:white; }\n\n@media (prefers-color-scheme: dark){\n  .fl-main-container .fl-flasher.fl-container{\n    background-color:#0f172a;\n    color:white; } }\n";
n(css,{});

/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key);
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return target.propertyIsEnumerable(symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

var cjs = deepmerge_1;

var FlasherFactory = (function () {
    function FlasherFactory(viewFactory) {
        this.options = {
            timeout: 5000,
            fps: 30,
            position: 'top-right',
            direction: 'top',
            style: {}
        };
        this.viewFactory = viewFactory;
    }
    FlasherFactory.prototype.success = function (message, title, options) {
        this.flash('success', message, title, options);
    };
    FlasherFactory.prototype.info = function (message, title, options) {
        this.flash('info', message, title, options);
    };
    FlasherFactory.prototype.warning = function (message, title, options) {
        this.flash('warning', message, title, options);
    };
    FlasherFactory.prototype.error = function (message, title, options) {
        this.flash('error', message, title, options);
    };
    FlasherFactory.prototype.flash = function (type, message, title, options) {
        var notification = this.createNotification(type, message, title, options);
        this.renderOptions({});
        this.render({ notification: notification });
    };
    FlasherFactory.prototype.createNotification = function (type, message, title, options) {
        if (typeof type === 'object') {
            options = type;
            type = options.type;
            message = options.message;
            title = options.title;
        }
        else if (typeof message === 'object') {
            options = message;
            message = options.message;
            title = options.title;
        }
        else if (typeof title === 'object') {
            options = title;
            title = options.title;
        }
        if (undefined === message) {
            throw new Error('message option is required');
        }
        return {
            type: type || 'info',
            message: message,
            title: title,
            options: options
        };
    };
    FlasherFactory.prototype.render = function (envelope) {
        var _this = this;
        var notification = envelope.notification;
        var nOptions = notification.options || {};
        var options = Array.isArray(nOptions) ? this.options : cjs(this.options, nOptions);
        var onContainerReady = function () {
            var container = _this.createContainer(options);
            _this.addToContainer(container, envelope, options);
        };
        if ('loading' !== document.readyState) {
            onContainerReady();
        }
        document.addEventListener('DOMContentLoaded', onContainerReady);
    };
    FlasherFactory.prototype.renderOptions = function (options) {
        this.options = cjs(this.options, options);
    };
    FlasherFactory.prototype.createContainer = function (options) {
        var containerSelector = ".fl-main-container[data-position=\"".concat(options.position, "\"]");
        var container = document.querySelector(containerSelector);
        if (container) {
            return container;
        }
        container = document.createElement('div');
        container.classList.add('fl-main-container');
        container.dataset.position = options.position;
        Object.keys(options.style).forEach(function (key) {
            container === null || container === void 0 ? void 0 : container.style.setProperty(key, options.style[key]);
        });
        document.body.append(container);
        return container;
    };
    FlasherFactory.prototype.addToContainer = function (container, envelope, options) {
        var template = this.stringToHTML(envelope.template || this.viewFactory.render(envelope));
        this.appendNotification(container, template, options.direction);
        this.renderProgressBar(template, options);
        this.handleClick(template);
    };
    FlasherFactory.prototype.appendNotification = function (container, template, direction) {
        if (direction === 'bottom') {
            container.append(template);
        }
        else {
            container.prepend(template);
        }
        setTimeout(function () {
            template.classList.add('fl-show');
        }, 100);
    };
    FlasherFactory.prototype.removeNotification = function (template) {
        var container = template.parentElement;
        template.classList.remove('fl-show');
        template.addEventListener('transitionend', function () {
            template.remove();
            if (container.hasChildNodes()) {
                return;
            }
            container.remove();
        });
    };
    FlasherFactory.prototype.handleClick = function (template) {
        var _this = this;
        template.addEventListener('click', function () { return _this.removeNotification(template); });
    };
    FlasherFactory.prototype.renderProgressBar = function (template, options) {
        var _this = this;
        if (!options.timeout || options.timeout <= 0) {
            return;
        }
        var progressBar = document.createElement('span');
        progressBar.classList.add('fl-progress');
        var progressBarContainer = template.querySelector('.fl-progress-bar');
        progressBarContainer && progressBarContainer.append(progressBar);
        var lapse = 1000 / options.fps;
        var width = 0;
        var showProgress = function () {
            width += 1;
            var percent = (1 - lapse * (width / options.timeout)) * 100;
            progressBar.style.width = "".concat(percent, "%");
            if (percent <= 0) {
                clearInterval(progressInterval);
                _this.removeNotification(template);
            }
        };
        var progressInterval = window.setInterval(showProgress, lapse);
        template.addEventListener('mouseout', function () { return progressInterval = window.setInterval(showProgress, lapse); });
        template.addEventListener('mouseover', function () { return clearInterval(progressInterval); });
    };
    FlasherFactory.prototype.stringToHTML = function (str) {
        var support = (function () {
            if (!DOMParser) {
                return false;
            }
            var parser = new DOMParser();
            try {
                parser.parseFromString('x', 'text/html');
            }
            catch (err) {
                return false;
            }
            return true;
        })();
        if (support) {
            var parser = new DOMParser();
            var doc = parser.parseFromString(str, 'text/html');
            return doc.body.firstChild;
        }
        var dom = document.createElement('div');
        dom.innerHTML = str;
        return dom.firstElementChild;
    };
    return FlasherFactory;
}());

var Flasher = (function () {
    function Flasher() {
        this.defaultHandler = 'theme.flasher';
        this.factories = new Map();
        this.themes = new Map();
    }
    Flasher.prototype.success = function (message, title, options) {
        this.flash('success', message, title, options);
    };
    Flasher.prototype.info = function (message, title, options) {
        this.flash('info', message, title, options);
    };
    Flasher.prototype.warning = function (message, title, options) {
        this.flash('warning', message, title, options);
    };
    Flasher.prototype.error = function (message, title, options) {
        this.flash('error', message, title, options);
    };
    Flasher.prototype.flash = function (type, message, title, options) {
        var notification = this.createNotification(type, message, title, options);
        var factory = this.create(this.defaultHandler);
        factory.renderOptions({});
        factory.render({ notification: notification });
    };
    Flasher.prototype.createNotification = function (type, message, title, options) {
        if (typeof type === 'object') {
            options = type;
            type = options.type;
            message = options.message;
            title = options.title;
        }
        else if (typeof message === 'object') {
            options = message;
            message = options.message;
            title = options.title;
        }
        else if (typeof title === 'object') {
            options = title;
            title = options.title;
        }
        if (undefined === message) {
            throw new Error('message option is required');
        }
        return {
            type: type || 'info',
            message: message,
            title: title,
            options: options
        };
    };
    Flasher.prototype.create = function (alias) {
        alias = this.resolveHandler(alias);
        this.resolveThemeHandler(alias);
        var factory = this.factories.get(alias);
        if (!factory) {
            throw new Error("Unable to resolve \"".concat(alias, "\" notification factory, did you forget to register it?"));
        }
        return factory;
    };
    Flasher.prototype.renderOptions = function (options) {
        var _this = this;
        Object.entries(options).forEach(function (_a) {
            var handler = _a[0], option = _a[1];
            _this.create(handler).renderOptions(option);
        });
    };
    Flasher.prototype.render = function (response) {
        var _this = this;
        response = this.resolveResponse(response);
        this.addStyles(response.styles, function () {
            _this.addScripts(response.scripts, function () {
                _this.renderOptions(response.options);
                _this.renderEnvelopes(response.envelopes, response.context);
            });
        });
    };
    Flasher.prototype.addFactory = function (name, factory) {
        this.factories.set(name, factory);
    };
    Flasher.prototype.addTheme = function (name, theme) {
        this.themes.set(name, theme);
    };
    Flasher.prototype.using = function (name) {
        this.defaultHandler = name;
        return this;
    };
    Flasher.prototype.addStyles = function (urls, callback) {
        var _this = this;
        if (urls.length === 0) {
            if (typeof callback === 'function') {
                callback();
            }
            return;
        }
        if (document.querySelector("link[href=\"".concat(urls[0], "\"]")) !== null) {
            this.addStyles(urls.slice(1), callback);
            return;
        }
        var tag = document.createElement('link');
        tag.setAttribute('href', urls[0]);
        tag.setAttribute('type', 'text/css');
        tag.setAttribute('rel', 'stylesheet');
        tag.onload = function () { return _this.addStyles(urls.slice(1), callback); };
        document.head.appendChild(tag);
    };
    Flasher.prototype.addScripts = function (urls, callback) {
        var _this = this;
        if (urls.length === 0) {
            if (typeof callback === 'function') {
                callback();
            }
            return;
        }
        if (document.querySelector("script[src=\"".concat(urls[0], "\"]")) !== null) {
            this.addScripts(urls.slice(1), callback);
            return;
        }
        var tag = document.createElement('script');
        tag.setAttribute('src', urls[0]);
        tag.setAttribute('type', 'text/javascript');
        tag.onload = function () { return _this.addScripts(urls.slice(1), callback); };
        document.body.appendChild(tag);
    };
    Flasher.prototype.renderEnvelopes = function (envelopes, context) {
        var _this = this;
        var queues = new Map();
        envelopes.forEach(function (envelope) {
            envelope.context = Object.assign({}, envelope.context || {}, context);
            envelope.handler = _this.resolveHandler(envelope.handler);
            var factory = _this.create(envelope.handler);
            if (!_this.isQueueable(factory)) {
                factory.render(envelope);
                return;
            }
            queues.get(envelope.handler) || factory.resetQueue();
            factory.addEnvelope(envelope);
            queues.set(envelope.handler, factory);
        });
        queues.forEach(function (factory) { return factory.renderQueue(); });
    };
    Flasher.prototype.isQueueable = function (object) {
        return typeof object.addEnvelope === 'function'
            && typeof object.renderQueue === 'function';
    };
    Flasher.prototype.resolveResponse = function (response) {
        var _this = this;
        response.envelopes = response.envelopes || [];
        response.options = response.options || {};
        response.scripts = response.scripts || [];
        response.styles = response.styles || [];
        response.context = response.context || {};
        Object.entries(response.options).forEach(function (_a) {
            var handler = _a[0], options = _a[1];
            response.options[handler] = _this.parseOptions(options);
        });
        response.envelopes.forEach(function (envelope) {
            envelope.handler = _this.resolveHandler(envelope.handler);
            envelope.notification.options = _this.parseOptions(envelope.notification.options || {});
            _this.pushStyles(response, envelope.handler);
        });
        return response;
    };
    Flasher.prototype.parseOptions = function (options) {
        var _this = this;
        Object.entries(options).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            options[key] = _this.parseFunction(value);
        });
        return options;
    };
    Flasher.prototype.parseFunction = function (func) {
        var _a, _b;
        if (typeof func !== 'string') {
            return func;
        }
        var match = func.match(/^function(?:.+)?(?:\s+)?\((.+)?\)(?:\s+|\n+)?{(?:\s+|\n+)?((?:.|\n)+)}$/m);
        if (!match) {
            return func;
        }
        var args = (_b = (_a = match[1]) === null || _a === void 0 ? void 0 : _a.split(',').map(function (arg) { return arg.trim(); })) !== null && _b !== void 0 ? _b : [];
        var body = match[2];
        return new (Function.bind.apply(Function, __spreadArray(__spreadArray([void 0], args, false), [body], false)))();
    };
    Flasher.prototype.pushStyles = function (response, handler) {
        var _a;
        handler = handler.replace('theme.', '');
        var styles = ((_a = this.themes.get(handler)) === null || _a === void 0 ? void 0 : _a.styles) || [];
        response.styles = response.styles
            .concat(styles)
            .filter(function (value, index, self) { return self.indexOf(value) === index; });
    };
    Flasher.prototype.resolveHandler = function (handler) {
        handler = handler || this.defaultHandler;
        if (['flasher', 'theme', 'template'].includes(handler)) {
            handler = 'theme.flasher';
        }
        handler = handler.replace('template.', 'theme.');
        return handler;
    };
    Flasher.prototype.resolveThemeHandler = function (alias) {
        if (0 !== alias.indexOf('theme.')) {
            return;
        }
        var viewFactory = this.themes.get(alias.replace('theme.', ''));
        if (!viewFactory) {
            return;
        }
        this.addFactory(alias, new FlasherFactory(viewFactory));
    };
    return Flasher;
}());

var flasher = new Flasher();
flasher.addTheme('flasher', {
    render: function (envelope) {
        var _a;
        var notification = envelope.notification;
        return '<div class="fl-flasher fl-container fl-' + notification.type + '">' +
            '<div class="fl-content">' +
            '<div class="fl-icon"></div>' +
            '<div>' +
            '<strong class="fl-title">' + ((_a = notification.title) !== null && _a !== void 0 ? _a : notification.type) + '</strong>' +
            '<span class="fl-message">' + notification.message + '</span>' +
            '</div>' +
            '</div>' +
            '<span class="fl-progress-bar"></span>' +
            '</div>';
    }
});

module.exports = flasher;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,