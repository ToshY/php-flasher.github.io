"use strict";
(self["webpackChunk"] = self["webpackChunk"] || []).push([["vendors-node_modules_flasher_flasher_dist_index_js"],{

/***/ "./node_modules/@flasher/flasher/dist/index.js":
/*!*****************************************************!*\
  !*** ./node_modules/@flasher/flasher/dist/index.js ***!
  \*****************************************************/
/***/ (function(module) {



/******************************************************************************
Copyright (c) Microsoft Corporation.

Permission to use, copy, modify, and/or distribute this software for any
purpose with or without fee is hereby granted.

THE SOFTWARE IS PROVIDED "AS IS" AND THE AUTHOR DISCLAIMS ALL WARRANTIES WITH
REGARD TO THIS SOFTWARE INCLUDING ALL IMPLIED WARRANTIES OF MERCHANTABILITY
AND FITNESS. IN NO EVENT SHALL THE AUTHOR BE LIABLE FOR ANY SPECIAL, DIRECT,
INDIRECT, OR CONSEQUENTIAL DAMAGES OR ANY DAMAGES WHATSOEVER RESULTING FROM
LOSS OF USE, DATA OR PROFITS, WHETHER IN AN ACTION OF CONTRACT, NEGLIGENCE OR
OTHER TORTIOUS ACTION, ARISING OUT OF OR IN CONNECTION WITH THE USE OR
PERFORMANCE OF THIS SOFTWARE.
***************************************************************************** */

function __spreadArray(to, from, pack) {
    if (pack || arguments.length === 2) for (var i = 0, l = from.length, ar; i < l; i++) {
        if (ar || !(i in from)) {
            if (!ar) ar = Array.prototype.slice.call(from, 0, i);
            ar[i] = from[i];
        }
    }
    return to.concat(ar || Array.prototype.slice.call(from));
}

var isMergeableObject = function isMergeableObject(value) {
	return isNonNullObject(value)
		&& !isSpecial(value)
};

function isNonNullObject(value) {
	return !!value && typeof value === 'object'
}

function isSpecial(value) {
	var stringValue = Object.prototype.toString.call(value);

	return stringValue === '[object RegExp]'
		|| stringValue === '[object Date]'
		|| isReactElement(value)
}

// see https://github.com/facebook/react/blob/b5ac963fb791d1298e7f396236383bc955f916c1/src/isomorphic/classic/element/ReactElement.js#L21-L25
var canUseSymbol = typeof Symbol === 'function' && Symbol.for;
var REACT_ELEMENT_TYPE = canUseSymbol ? Symbol.for('react.element') : 0xeac7;

function isReactElement(value) {
	return value.$$typeof === REACT_ELEMENT_TYPE
}

function emptyTarget(val) {
	return Array.isArray(val) ? [] : {}
}

function cloneUnlessOtherwiseSpecified(value, options) {
	return (options.clone !== false && options.isMergeableObject(value))
		? deepmerge(emptyTarget(value), value, options)
		: value
}

function defaultArrayMerge(target, source, options) {
	return target.concat(source).map(function(element) {
		return cloneUnlessOtherwiseSpecified(element, options)
	})
}

function getMergeFunction(key, options) {
	if (!options.customMerge) {
		return deepmerge
	}
	var customMerge = options.customMerge(key);
	return typeof customMerge === 'function' ? customMerge : deepmerge
}

function getEnumerableOwnPropertySymbols(target) {
	return Object.getOwnPropertySymbols
		? Object.getOwnPropertySymbols(target).filter(function(symbol) {
			return target.propertyIsEnumerable(symbol)
		})
		: []
}

function getKeys(target) {
	return Object.keys(target).concat(getEnumerableOwnPropertySymbols(target))
}

function propertyIsOnObject(object, property) {
	try {
		return property in object
	} catch(_) {
		return false
	}
}

// Protects from prototype poisoning and unexpected merging up the prototype chain.
function propertyIsUnsafe(target, key) {
	return propertyIsOnObject(target, key) // Properties are safe to merge if they don't exist in the target yet,
		&& !(Object.hasOwnProperty.call(target, key) // unsafe if they exist up the prototype chain,
			&& Object.propertyIsEnumerable.call(target, key)) // and also unsafe if they're nonenumerable.
}

function mergeObject(target, source, options) {
	var destination = {};
	if (options.isMergeableObject(target)) {
		getKeys(target).forEach(function(key) {
			destination[key] = cloneUnlessOtherwiseSpecified(target[key], options);
		});
	}
	getKeys(source).forEach(function(key) {
		if (propertyIsUnsafe(target, key)) {
			return
		}

		if (propertyIsOnObject(target, key) && options.isMergeableObject(source[key])) {
			destination[key] = getMergeFunction(key, options)(target[key], source[key], options);
		} else {
			destination[key] = cloneUnlessOtherwiseSpecified(source[key], options);
		}
	});
	return destination
}

function deepmerge(target, source, options) {
	options = options || {};
	options.arrayMerge = options.arrayMerge || defaultArrayMerge;
	options.isMergeableObject = options.isMergeableObject || isMergeableObject;
	// cloneUnlessOtherwiseSpecified is added to `options` so that custom arrayMerge()
	// implementations can use it. The caller may not replace it.
	options.cloneUnlessOtherwiseSpecified = cloneUnlessOtherwiseSpecified;

	var sourceIsArray = Array.isArray(source);
	var targetIsArray = Array.isArray(target);
	var sourceAndTargetTypesMatch = sourceIsArray === targetIsArray;

	if (!sourceAndTargetTypesMatch) {
		return cloneUnlessOtherwiseSpecified(source, options)
	} else if (sourceIsArray) {
		return options.arrayMerge(target, source, options)
	} else {
		return mergeObject(target, source, options)
	}
}

deepmerge.all = function deepmergeAll(array, options) {
	if (!Array.isArray(array)) {
		throw new Error('first argument should be an array')
	}

	return array.reduce(function(prev, next) {
		return deepmerge(prev, next, options)
	}, {})
};

var deepmerge_1 = deepmerge;

var cjs = deepmerge_1;

var FlasherFactory = (function () {
    function FlasherFactory(viewFactory) {
        this.options = {
            timeout: 5000,
            fps: 30,
            position: 'top-right',
            direction: 'top',
            style: {}
        };
        this.viewFactory = viewFactory;
    }
    FlasherFactory.prototype.success = function (message, title, options) {
        this.flash('success', message, title, options);
    };
    FlasherFactory.prototype.info = function (message, title, options) {
        this.flash('info', message, title, options);
    };
    FlasherFactory.prototype.warning = function (message, title, options) {
        this.flash('warning', message, title, options);
    };
    FlasherFactory.prototype.error = function (message, title, options) {
        this.flash('error', message, title, options);
    };
    FlasherFactory.prototype.flash = function (type, message, title, options) {
        var notification = this.createNotification(type, message, title, options);
        this.renderOptions({});
        this.render({ notification: notification });
    };
    FlasherFactory.prototype.createNotification = function (type, message, title, options) {
        if (typeof type === 'object') {
            options = type;
            type = options.type;
            message = options.message;
            title = options.title;
        }
        else if (typeof message === 'object') {
            options = message;
            message = options.message;
            title = options.title;
        }
        else if (typeof title === 'object') {
            options = title;
            title = options.title;
        }
        if (undefined === message) {
            throw new Error('message option is required');
        }
        return {
            type: type || 'info',
            message: message,
            title: title,
            options: options
        };
    };
    FlasherFactory.prototype.render = function (envelope) {
        var notification = envelope.notification;
        var nOptions = notification.options || {};
        var options = Array.isArray(nOptions) ? this.options : cjs(this.options, nOptions);
        var container = this.createContainer(options);
        this.addToContainer(container, envelope, options);
    };
    FlasherFactory.prototype.renderOptions = function (options) {
        this.options = cjs(this.options, options);
    };
    FlasherFactory.prototype.createContainer = function (options) {
        var containerSelector = ".fl-main-container[data-position=\"".concat(options.position, "\"]");
        var container = document.querySelector(containerSelector);
        if (container) {
            return container;
        }
        container = document.createElement('div');
        container.classList.add('fl-main-container');
        container.dataset.position = options.position;
        Object.keys(options.style).forEach(function (key) {
            container === null || container === void 0 ? void 0 : container.style.setProperty(key, options.style[key]);
        });
        document.body.append(container);
        return container;
    };
    FlasherFactory.prototype.addToContainer = function (container, envelope, options) {
        var template = this.stringToHTML(envelope.template || this.viewFactory.render(envelope));
        this.appendNotification(container, template, options.direction);
        this.renderProgressBar(template, options);
        this.handleClick(template);
    };
    FlasherFactory.prototype.appendNotification = function (container, template, direction) {
        if (direction === 'bottom') {
            container.append(template);
        }
        else {
            container.prepend(template);
        }
        setTimeout(function () {
            template.classList.add('fl-show');
        }, 100);
    };
    FlasherFactory.prototype.removeNotification = function (template) {
        var container = template.parentElement;
        template.classList.remove('fl-show');
        template.addEventListener('transitionend', function () {
            template.remove();
            if (container.hasChildNodes()) {
                return;
            }
            container.remove();
        });
    };
    FlasherFactory.prototype.handleClick = function (template) {
        var _this = this;
        template.addEventListener('click', function () { return _this.removeNotification(template); });
    };
    FlasherFactory.prototype.renderProgressBar = function (template, options) {
        var _this = this;
        if (!options.timeout || options.timeout <= 0) {
            return;
        }
        var progressBar = document.createElement('div');
        progressBar.classList.add('fl-progress');
        var progressBarContainer = template.querySelector('.fl-progress-bar');
        progressBarContainer && progressBarContainer.append(progressBar);
        var lapse = 1000 / options.fps;
        var width = 0;
        var showProgress = function () {
            width += 1;
            var percent = (1 - lapse * (width / options.timeout)) * 100;
            progressBar.style.width = "".concat(percent, "%");
            if (percent <= 0) {
                clearInterval(progressInterval);
                _this.removeNotification(template);
            }
        };
        var progressInterval = window.setInterval(showProgress, lapse);
        template.addEventListener('mouseout', function () { return progressInterval = window.setInterval(showProgress, lapse); });
        template.addEventListener('mouseover', function () { return clearInterval(progressInterval); });
    };
    FlasherFactory.prototype.stringToHTML = function (str) {
        var support = (function () {
            if (!DOMParser) {
                return false;
            }
            var parser = new DOMParser();
            try {
                parser.parseFromString('x', 'text/html');
            }
            catch (err) {
                return false;
            }
            return true;
        })();
        if (support) {
            var parser = new DOMParser();
            var doc = parser.parseFromString(str, 'text/html');
            return doc.body.firstChild;
        }
        var dom = document.createElement('div');
        dom.innerHTML = str;
        return dom.firstElementChild;
    };
    return FlasherFactory;
}());

var Flasher = (function () {
    function Flasher() {
        this.defaultHandler = 'theme.flasher';
        this.factories = new Map();
        this.themes = new Map();
    }
    Flasher.prototype.success = function (message, title, options) {
        this.flash('success', message, title, options);
    };
    Flasher.prototype.info = function (message, title, options) {
        this.flash('info', message, title, options);
    };
    Flasher.prototype.warning = function (message, title, options) {
        this.flash('warning', message, title, options);
    };
    Flasher.prototype.error = function (message, title, options) {
        this.flash('error', message, title, options);
    };
    Flasher.prototype.flash = function (type, message, title, options) {
        var notification = this.createNotification(type, message, title, options);
        var factory = this.create(this.defaultHandler);
        factory.renderOptions({});
        factory.render({ notification: notification });
    };
    Flasher.prototype.createNotification = function (type, message, title, options) {
        if (typeof type === 'object') {
            options = type;
            type = options.type;
            message = options.message;
            title = options.title;
        }
        else if (typeof message === 'object') {
            options = message;
            message = options.message;
            title = options.title;
        }
        else if (typeof title === 'object') {
            options = title;
            title = options.title;
        }
        if (undefined === message) {
            throw new Error('message option is required');
        }
        return {
            type: type || 'info',
            message: message,
            title: title,
            options: options
        };
    };
    Flasher.prototype.create = function (alias) {
        alias = this.resolveHandler(alias);
        this.resolveThemeHandler(alias);
        var factory = this.factories.get(alias);
        if (!factory) {
            throw new Error("Unable to resolve \"".concat(alias, "\" notification factory, did you forget to register it?"));
        }
        return factory;
    };
    Flasher.prototype.renderOptions = function (options) {
        var _this = this;
        Object.entries(options).forEach(function (_a) {
            var handler = _a[0], option = _a[1];
            _this.create(handler).renderOptions(option);
        });
    };
    Flasher.prototype.render = function (response) {
        var _this = this;
        response = this.resolveResponse(response);
        this.addStyles(response.styles, function () {
            _this.addScripts(response.scripts, function () {
                _this.renderOptions(response.options);
                _this.renderEnvelopes(response.envelopes, response.context);
            });
        });
    };
    Flasher.prototype.addFactory = function (name, factory) {
        this.factories.set(name, factory);
    };
    Flasher.prototype.addTheme = function (name, theme) {
        this.themes.set(name, theme);
    };
    Flasher.prototype.using = function (name) {
        this.defaultHandler = name;
        return this;
    };
    Flasher.prototype.addStyles = function (urls, callback) {
        var _this = this;
        if (urls.length === 0) {
            if (typeof callback === 'function') {
                callback();
            }
            return;
        }
        if (document.querySelector("link[href=\"".concat(urls[0], "\"]")) !== null) {
            this.addStyles(urls.slice(1), callback);
            return;
        }
        var tag = document.createElement('link');
        tag.setAttribute('href', urls[0]);
        tag.setAttribute('type', 'text/css');
        tag.setAttribute('rel', 'stylesheet');
        tag.onload = function () { return _this.addStyles(urls.slice(1), callback); };
        document.head.appendChild(tag);
    };
    Flasher.prototype.addScripts = function (urls, callback) {
        var _this = this;
        if (urls.length === 0) {
            if (typeof callback === 'function') {
                callback();
            }
            return;
        }
        if (document.querySelector("script[src=\"".concat(urls[0], "\"]")) !== null) {
            this.addScripts(urls.slice(1), callback);
            return;
        }
        var tag = document.createElement('script');
        tag.setAttribute('src', urls[0]);
        tag.setAttribute('type', 'text/javascript');
        tag.onload = function () { return _this.addScripts(urls.slice(1), callback); };
        document.body.appendChild(tag);
    };
    Flasher.prototype.renderEnvelopes = function (envelopes, context) {
        var _this = this;
        var queues = new Map();
        envelopes.forEach(function (envelope) {
            envelope.context = Object.assign({}, envelope.context || {}, context);
            envelope.handler = _this.resolveHandler(envelope.handler);
            var factory = _this.create(envelope.handler);
            if (!_this.isQueueable(factory)) {
                factory.render(envelope);
                return;
            }
            queues.get(envelope.handler) || factory.resetQueue();
            factory.addEnvelope(envelope);
            queues.set(envelope.handler, factory);
        });
        queues.forEach(function (factory) { return factory.renderQueue(); });
    };
    Flasher.prototype.isQueueable = function (object) {
        return typeof object.addEnvelope === 'function'
            && typeof object.renderQueue === 'function';
    };
    Flasher.prototype.resolveResponse = function (response) {
        var _this = this;
        response.envelopes = response.envelopes || [];
        response.options = response.options || {};
        response.scripts = response.scripts || [];
        response.styles = response.styles || [];
        response.context = response.context || {};
        Object.entries(response.options).forEach(function (_a) {
            var handler = _a[0], options = _a[1];
            response.options[handler] = _this.parseOptions(options);
        });
        response.envelopes.forEach(function (envelope) {
            envelope.handler = _this.resolveHandler(envelope.handler);
            envelope.notification.options = _this.parseOptions(envelope.notification.options || {});
            _this.pushStyles(response, envelope.handler);
        });
        return response;
    };
    Flasher.prototype.parseOptions = function (options) {
        var _this = this;
        Object.entries(options).forEach(function (_a) {
            var key = _a[0], value = _a[1];
            options[key] = _this.parseFunction(value);
        });
        return options;
    };
    Flasher.prototype.parseFunction = function (func) {
        var _a, _b;
        if (typeof func !== 'string') {
            return func;
        }
        var match = func.match(/^function(?:.+)?(?:\s+)?\((.+)?\)(?:\s+|\n+)?{(?:\s+|\n+)?((?:.|\n)+)}$/m);
        if (!match) {
            return func;
        }
        var args = (_b = (_a = match[1]) === null || _a === void 0 ? void 0 : _a.split(',').map(function (arg) { return arg.trim(); })) !== null && _b !== void 0 ? _b : [];
        var body = match[2];
        return new (Function.bind.apply(Function, __spreadArray(__spreadArray([void 0], args, false), [body], false)))();
    };
    Flasher.prototype.pushStyles = function (response, handler) {
        var _a;
        handler = handler.replace('theme.', '');
        var styles = ((_a = this.themes.get(handler)) === null || _a === void 0 ? void 0 : _a.styles) || [];
        response.styles = response.styles
            .concat(styles)
            .filter(function (value, index, self) { return self.indexOf(value) === index; });
    };
    Flasher.prototype.resolveHandler = function (handler) {
        handler = handler || this.defaultHandler;
        if (['flasher', 'theme', 'template'].includes(handler)) {
            handler = 'theme.flasher';
        }
        handler = handler.replace('template.', 'theme.');
        return handler;
    };
    Flasher.prototype.resolveThemeHandler = function (alias) {
        if (0 !== alias.indexOf('theme.')) {
            return;
        }
        var viewFactory = this.themes.get(alias.replace('theme.', ''));
        if (!viewFactory) {
            return;
        }
        this.addFactory(alias, new FlasherFactory(viewFactory));
    };
    return Flasher;
}());

var e=[],t=[];function n(n,r){if(n&&"undefined"!=typeof document){var a,s=!0===r.prepend?"prepend":"append",d=!0===r.singleTag,i="string"==typeof r.container?document.querySelector(r.container):document.getElementsByTagName("head")[0];if(d){var u=e.indexOf(i);-1===u&&(u=e.push(i)-1,t[u]={}),a=t[u]&&t[u][s]?t[u][s]:t[u][s]=c();}else a=c();65279===n.charCodeAt(0)&&(n=n.substring(1)),a.styleSheet?a.styleSheet.cssText+=n:a.appendChild(document.createTextNode(n));}function c(){var e=document.createElement("style");if(e.setAttribute("type","text/css"),r.attributes)for(var t=Object.keys(r.attributes),n=0;n<t.length;n++)e.setAttribute(t[n],r.attributes[t[n]]);var a="prepend"===s?"afterbegin":"beforeend";return i.insertAdjacentElement(a,e),e}}

var css = ".fl-main-container {\n  position: fixed;\n  max-width: 350px;\n  width: 100%;\n  z-index: 99999; }\n  .fl-main-container[data-position^=\"top-\"] {\n    top: 0.5rem; }\n  .fl-main-container[data-position^=\"bottom-\"] {\n    bottom: 0.5rem; }\n  .fl-main-container[data-position$=\"-right\"] {\n    right: 0.5rem; }\n    .fl-main-container[data-position$=\"-right\"] .fl-container {\n      transform: translateX(110%); }\n  .fl-main-container[data-position$=\"-left\"] {\n    left: 0.5rem; }\n    .fl-main-container[data-position$=\"-left\"] .fl-container {\n      transform: translateX(-110%); }\n  .fl-main-container[data-position$=\"-center\"] {\n    left: 50%;\n    transform: translateX(-50%); }\n  .fl-main-container[data-position=\"top-center\"] .fl-container {\n    transform: translateY(-100vh); }\n  .fl-main-container[data-position=\"bottom-center\"] .fl-container {\n    transform: translateY(100vh); }\n  .fl-main-container .fl-container {\n    transition: transform 0.3s ease-in-out;\n    overflow: hidden; }\n    .fl-main-container .fl-container.fl-show {\n      transform: translate(0, 0); }\n\n.fl-flasher.fl-container {\n  font-family: -apple-system, BlinkMacSystemFont, \"Segoe UI\", Roboto, Helvetica, Arial, sans-serif, \"Apple Color Emoji\", \"Segoe UI Emoji\", \"Segoe UI Symbol\";\n  line-height: 1.5;\n  margin-top: 0.5rem;\n  background-color: #ffffff;\n  border-radius: 0.375rem 0 0 0.375rem;\n  cursor: pointer;\n  box-shadow: 0 10px 15px -3px rgba(0, 0, 0, 0.1), 0 4px 6px -2px rgba(0, 0, 0, 0.05);\n  word-break: break-word; }\n  .fl-flasher.fl-container .fl-content {\n    display: flex;\n    padding-top: 0.75rem;\n    padding-bottom: 0.75rem;\n    padding-right: 0.75rem;\n    align-items: center; }\n  .fl-flasher.fl-container .fl-icon {\n    display: inline-block;\n    margin-left: 0.5rem;\n    margin-right: 0.5rem;\n    background-position: center;\n    background-repeat: no-repeat;\n    background-size: cover;\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n    flex-shrink: 0;\n    width: 2.5rem;\n    height: 2.5rem;\n    border-radius: 50%; }\n  .fl-flasher.fl-container .fl-title {\n    display: block;\n    margin-left: 0.5rem;\n    font-size: 1rem;\n    font-weight: 500;\n    line-height: 1.25rem;\n    text-transform: capitalize; }\n  .fl-flasher.fl-container .fl-message {\n    display: block;\n    margin-top: 0.25rem;\n    margin-left: 0.5rem;\n    color: #6B7280;\n    font-size: 0.875rem;\n    line-height: 1.25rem;\n    text-transform: capitalize; }\n  .fl-flasher.fl-container .fl-progress-bar {\n    display: flex;\n    height: 0.125rem; }\n\n.fl-flasher.fl-success {\n  border-left: 8px solid #059669FF; }\n  .fl-flasher.fl-success .fl-icon {\n    background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg width='20' height='20' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='%23059669FF'%3E%3Cpath fill-rule='evenodd' d='M10 18a8 8 0 100-16 8 8 0 000 16zm3.707-9.293a1 1 0 00-1.414-1.414L9 10.586 7.707 9.293a1 1 0 00-1.414 1.414l2 2a1 1 0 001.414 0l4-4z' clip-rule='evenodd' /%3E%3C/svg%3E\"); }\n  .fl-flasher.fl-success .fl-title {\n    color: #059669FF; }\n  .fl-flasher.fl-success .fl-progress-bar {\n    background-color: #6dface; }\n    .fl-flasher.fl-success .fl-progress-bar .fl-progress {\n      background-color: #059669FF; }\n\n.fl-flasher.fl-info {\n  border-left: 8px solid #2563EBFF; }\n  .fl-flasher.fl-info .fl-icon {\n    background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg width='20' height='20' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='%232563EBFF'%3E%3Cpath fill-rule='evenodd' d='M18 10a8 8 0 11-16 0 8 8 0 0116 0zm-7 4a1 1 0 11-2 0 1 1 0 012 0zm-1-9a1 1 0 00-1 1v3a1 1 0 102 0V6a1 1 0 00-1-1z' clip-rule='evenodd' /%3E%3C/svg%3E\"); }\n  .fl-flasher.fl-info .fl-title {\n    color: #2563EBFF; }\n  .fl-flasher.fl-info .fl-progress-bar {\n    background-color: #e0e9fc; }\n    .fl-flasher.fl-info .fl-progress-bar .fl-progress {\n      background-color: #2563EBFF; }\n\n.fl-flasher.fl-warning {\n  border-left: 8px solid #D97706FF; }\n  .fl-flasher.fl-warning .fl-icon {\n    background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg width='20' height='20' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='%23D97706FF'%3E%3Cpath fill-rule='evenodd' d='M8.257 3.099c.765-1.36 2.722-1.36 3.486 0l5.58 9.92c.75 1.334-.213 2.98-1.742 2.98H4.42c-1.53 0-2.493-1.646-1.743-2.98l5.58-9.92zM11 13a1 1 0 11-2 0 1 1 0 012 0zm-1-8a1 1 0 00-1 1v3a1 1 0 102 0V6a1 1 0 00-1-1z' clip-rule='evenodd' /%3E%3C/svg%3E\"); }\n  .fl-flasher.fl-warning .fl-title {\n    color: #D97706FF; }\n  .fl-flasher.fl-warning .fl-progress-bar {\n    background-color: #fdd8ae; }\n    .fl-flasher.fl-warning .fl-progress-bar .fl-progress {\n      background-color: #D97706FF; }\n\n.fl-flasher.fl-error {\n  border-left: 8px solid #DC2626FF; }\n  .fl-flasher.fl-error .fl-icon {\n    background-image: url(\"data:image/svg+xml;charset=utf8,%3Csvg width='20' height='20' xmlns='http://www.w3.org/2000/svg' viewBox='0 0 20 20' fill='%23DC2626FF'%3E%3Cpath fill-rule='evenodd' d='M10 18a8 8 0 100-16 8 8 0 000 16zM8.707 7.293a1 1 0 00-1.414 1.414L8.586 10l-1.293 1.293a1 1 0 101.414 1.414L10 11.414l1.293 1.293a1 1 0 001.414-1.414L11.414 10l1.293-1.293a1 1 0 00-1.414-1.414L10 8.586 8.707 7.293z' clip-rule='evenodd' /%3E%3C/svg%3E\"); }\n  .fl-flasher.fl-error .fl-title {\n    color: #DC2626FF; }\n  .fl-flasher.fl-error .fl-progress-bar {\n    background-color: #f8d6d6; }\n    .fl-flasher.fl-error .fl-progress-bar .fl-progress {\n      background-color: #DC2626FF; }\n";
n(css,{});

var flasher = new Flasher();
flasher.addTheme('flasher', {
    render: function (envelope) {
        var _a;
        var notification = envelope.notification;
        return '<div class="fl-flasher fl-container fl-' + notification.type + '">' +
            '<div class="fl-content">' +
            '<div class="fl-icon"></div>' +
            '<div>' +
            '<strong class="fl-title">' + ((_a = notification.title) !== null && _a !== void 0 ? _a : notification.type) + '</strong>' +
            '<span class="fl-message">' + notification.message + '</span>' +
            '</div>' +
            '</div>' +
            '<div class="fl-progress-bar"></div>' +
            '</div>';
    }
});

module.exports = flasher;


/***/ })

}]);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,